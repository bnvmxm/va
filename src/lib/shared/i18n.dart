import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "About"
  String get titlesAbout => "About";
  /// "Collections"
  String get titlesCollections => "Collections";
  /// "New Phrase"
  String get titlesAddPhrase => "New Phrase";
  /// "Edit Phrase"
  String get titlesEditPhrase => "Edit Phrase";
  /// "New Group"
  String get titlesAddGroup => "New Group";
  /// "Edit Group"
  String get titlesEditGroup => "Edit Group";
  /// "Exercising"
  String get titlesExercising => "Exercising";
  /// "Confirm"
  String get titlesConfirm => "Confirm";
  /// "${count} phrases"
  String labelsStatPhrases(String count) => "${count} phrases";
  /// "Learning"
  String get labelsStatRateLearning => "Learning";
  /// "Learned"
  String get labelsStatRateLearned => "Learned";
  /// "Reviewing"
  String get labelsStatRateReviewing => "Reviewing";
  /// "Change the group"
  String get labelsEditorChangeGroup => "Change the group";
  /// "Phrase"
  String get labelsEditorPhrase => "Phrase";
  /// "Pronunciation"
  String get labelsEditorPronunciation => "Pronunciation";
  /// "Definition"
  String get labelsEditorDefinition => "Definition";
  /// "Group Name"
  String get labelsGroupName => "Group Name";
  /// "Add Example"
  String get labelsAddExample => "Add Example";
  /// "Exercise"
  String get labelsExercise => "Exercise";
  /// "Don't remember"
  String get labelsExerciseResultLow => "Don't remember";
  /// "Hardly remember"
  String get labelsExerciseResultNegative => "Hardly remember";
  /// "Unsure"
  String get labelsExerciseResultUncertain => "Unsure";
  /// "Looks learned"
  String get labelsExerciseResultPositive => "Looks learned";
  /// "Definitely learned"
  String get labelsExerciseResultHigh => "Definitely learned";
  /// "Save and Close"
  String get labelsSaveAndClose => "Save and Close";
  /// "Edit"
  String get labelsEdit => "Edit";
  /// "Add"
  String get labelsAdd => "Add";
  /// "View"
  String get labelsView => "View";
  /// "Language"
  String get labelsLanguage => "Language";
  /// "About"
  String get labelsAbout => "About";
  /// "Yes"
  String get labelsYes => "Yes";
  /// "No"
  String get labelsNo => "No";
  /// "Cancel"
  String get labelsCancel => "Cancel";
  /// "Close"
  String get labelsClose => "Close";
  /// "Phrase is required"
  String get validationMessagesPhraseRequired => "Phrase is required";
  /// "Definition is required"
  String get validationMessagesDefinitionRequired => "Definition is required";
  /// "At least one example is required"
  String get validationMessagesExampleRequired => "At least one example is required";
  /// "Name is required"
  String get validationMessagesGroupNameRequired => "Name is required";
  /// "Such group already exists"
  String get validationMessagesGroupExists => "Such group already exists";
  /// "Vocabulary Advancer"
  String get textAbout => "Vocabulary Advancer";
  /// "Flutter starter app"
  String get textAboutDescriptionHeader => "Flutter starter app";
  /// "The Vocabulary Advancer app's first purpose is apparently to assist in settlement of advanced vocabulary with phrase cards... which should be reviewed at appropriate intervals."
  String get textAboutDescriptionP1 => "The Vocabulary Advancer app's first purpose is apparently to assist in settlement of advanced vocabulary with phrase cards... which should be reviewed at appropriate intervals.";
  /// "But being just an another pet Flutter project, this app's aim is to also define a starting baseline, from mobile app production-ready architecture perspective."
  String get textAboutDescriptionP2 => "But being just an another pet Flutter project, this app's aim is to also define a starting baseline, from mobile app production-ready architecture perspective.";
  /// "Nothing to show here..."
  String get textNoData => "Nothing to show here...";
  /// "Done! No Phrases to exercise now from this Collection."
  String get textNoPhrase => "Done! No Phrases to exercise now from this Collection.";
  /// "Delete the Phrase group?"
  String get textConfirmationDeleteGroup => "Delete the Phrase group?";
  /// "Delete the Phrase?"
  String get textConfirmationDeletePhrase => "Delete the Phrase?";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_ru_RU extends I18n {
  const _I18n_ru_RU();

  /// "Информация"
  @override
  String get titlesAbout => "Информация";
  /// "Коллекции"
  @override
  String get titlesCollections => "Коллекции";
  /// "Новая Фраза"
  @override
  String get titlesAddPhrase => "Новая Фраза";
  /// "Изменение Фразы"
  @override
  String get titlesEditPhrase => "Изменение Фразы";
  /// "Новая Коллекция"
  @override
  String get titlesAddGroup => "Новая Коллекция";
  /// "Изменение Коллекции"
  @override
  String get titlesEditGroup => "Изменение Коллекции";
  /// "Упражнение"
  @override
  String get titlesExercising => "Упражнение";
  /// "Подтверждение"
  @override
  String get titlesConfirm => "Подтверждение";
  /// "Фраз: ${count}"
  @override
  String labelsStatPhrases(String count) => "Фраз: ${count}";
  /// "Запоминание"
  @override
  String get labelsStatRateLearning => "Запоминание";
  /// "Выучено"
  @override
  String get labelsStatRateLearned => "Выучено";
  /// "Закрепление"
  @override
  String get labelsStatRateReviewing => "Закрепление";
  /// "Сменить Коллекцию"
  @override
  String get labelsEditorChangeGroup => "Сменить Коллекцию";
  /// "Фраза"
  @override
  String get labelsEditorPhrase => "Фраза";
  /// "Произношение"
  @override
  String get labelsEditorPronunciation => "Произношение";
  /// "Определение"
  @override
  String get labelsEditorDefinition => "Определение";
  /// "Коллекция"
  @override
  String get labelsGroupName => "Коллекция";
  /// "Еще пример"
  @override
  String get labelsAddExample => "Еще пример";
  /// "Упражнение"
  @override
  String get labelsExercise => "Упражнение";
  /// "Не помню"
  @override
  String get labelsExerciseResultLow => "Не помню";
  /// "Плохо помню"
  @override
  String get labelsExerciseResultNegative => "Плохо помню";
  /// "Не ясно"
  @override
  String get labelsExerciseResultUncertain => "Не ясно";
  /// "Помню"
  @override
  String get labelsExerciseResultPositive => "Помню";
  /// "Хорошо помню"
  @override
  String get labelsExerciseResultHigh => "Хорошо помню";
  /// "Сохранить и закрыть"
  @override
  String get labelsSaveAndClose => "Сохранить и закрыть";
  /// "Изменить"
  @override
  String get labelsEdit => "Изменить";
  /// "Добавить"
  @override
  String get labelsAdd => "Добавить";
  /// "Просмотр"
  @override
  String get labelsView => "Просмотр";
  /// "Язык"
  @override
  String get labelsLanguage => "Язык";
  /// "Информация"
  @override
  String get labelsAbout => "Информация";
  /// "Да"
  @override
  String get labelsYes => "Да";
  /// "Нет"
  @override
  String get labelsNo => "Нет";
  /// "Отмена"
  @override
  String get labelsCancel => "Отмена";
  /// "Закрыть"
  @override
  String get labelsClose => "Закрыть";
  /// "Нужно указать Фразу"
  @override
  String get validationMessagesPhraseRequired => "Нужно указать Фразу";
  /// "Нужно указать Определение"
  @override
  String get validationMessagesDefinitionRequired => "Нужно указать Определение";
  /// "Нужно указать хотя бы один пример"
  @override
  String get validationMessagesExampleRequired => "Нужно указать хотя бы один пример";
  /// "Имя обязательно"
  @override
  String get validationMessagesGroupNameRequired => "Имя обязательно";
  /// "Такая Коллекция уже есть"
  @override
  String get validationMessagesGroupExists => "Такая Коллекция уже есть";
  /// "Vocabulary Advancer"
  @override
  String get textAbout => "Vocabulary Advancer";
  /// "Flutter starter app"
  @override
  String get textAboutDescriptionHeader => "Flutter starter app";
  /// "Vocabulary Advancer, очевидно, еще одно приложение для закрепления выражений и фраз изучаемого языка, с помощью работы с карточками"
  @override
  String get textAboutDescriptionP1 => "Vocabulary Advancer, очевидно, еще одно приложение для закрепления выражений и фраз изучаемого языка, с помощью работы с карточками";
  /// "Однако ж, этот проект преследует еще одну цель - определить основу для создания новых \"production-ready\" проектов на Flutter, с точки зрения архитектуры"
  @override
  String get textAboutDescriptionP2 => "Однако ж, этот проект преследует еще одну цель - определить основу для создания новых \"production-ready\" проектов на Flutter, с точки зрения архитектуры";
  /// "Здесь пока нет данных..."
  @override
  String get textNoData => "Здесь пока нет данных...";
  /// "Выполнено! Пока больше нет Фраз на повторение в этой Коллекции."
  @override
  String get textNoPhrase => "Выполнено! Пока больше нет Фраз на повторение в этой Коллекции.";
  /// "Удаляем Коллекцию?"
  @override
  String get textConfirmationDeleteGroup => "Удаляем Коллекцию?";
  /// "Удаляем Фразу?"
  @override
  String get textConfirmationDeletePhrase => "Удаляем Фразу?";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("ru", "RU")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru_RU" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}