// Mocks generated by Mockito 5.0.16 from annotations
// in vocabulary_advancer/test/unit/bootstrapper.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vocabulary_advancer/app/services/localization.dart' as _i3;
import 'package:vocabulary_advancer/core/model.dart' as _i7;
import 'package:vocabulary_advancer/data/repositories/locale_repository.dart'
    as _i5;
import 'package:vocabulary_advancer/data/repositories/phrase_group_repository.dart'
    as _i6;
import 'package:vocabulary_advancer/data/repositories/phrase_repository.dart'
    as _i8;
import 'package:vocabulary_advancer/shared/app_logger.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLogSettings_0 extends _i1.Fake implements _i2.LogSettings {}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i2.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LogSettings get settings =>
      (super.noSuchMethod(Invocation.getter(#settings),
          returnValue: _FakeLogSettings_0()) as _i2.LogSettings);
  @override
  void t(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#t, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void v(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#v, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void d(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#d, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void i(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#i, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void w(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#w, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void e(String Function()? message,
          {String? logName, Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
          Invocation.method(#e, [message],
              {#logName: logName, #error: error, #stackTrace: stackTrace}),
          returnValueForMissingStub: null);
  @override
  void c(String Function()? message,
          {String? logName, Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
          Invocation.method(#c, [message],
              {#logName: logName, #error: error, #stackTrace: stackTrace}),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocalizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationService extends _i1.Mock
    implements _i3.LocalizationService {
  MockLocalizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> switchLocale() =>
      (super.noSuchMethod(Invocation.method(#switchLocale, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocaleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleRepository extends _i1.Mock implements _i5.LocaleRepository {
  MockLocaleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> getChosen() =>
      (super.noSuchMethod(Invocation.method(#getChosen, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<dynamic> setLocale(String? tag) =>
      (super.noSuchMethod(Invocation.method(#setLocale, [tag]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PhraseGroupRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhraseGroupRepository extends _i1.Mock
    implements _i6.PhraseGroupRepository {
  MockPhraseGroupRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, String>> findKnownNames() => (super.noSuchMethod(
          Invocation.method(#findKnownNames, []),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as _i4.Future<Map<String, String>>);
  @override
  _i4.Future<Iterable<_i7.PhraseGroup>> findMany() =>
      (super.noSuchMethod(Invocation.method(#findMany, []),
              returnValue:
                  Future<Iterable<_i7.PhraseGroup>>.value(<_i7.PhraseGroup>[]))
          as _i4.Future<Iterable<_i7.PhraseGroup>>);
  @override
  _i4.Future<_i7.PhraseGroup?> findSingle(String? groupId) =>
      (super.noSuchMethod(Invocation.method(#findSingle, [groupId]),
              returnValue: Future<_i7.PhraseGroup?>.value())
          as _i4.Future<_i7.PhraseGroup?>);
  @override
  _i4.Future<_i7.PhraseGroup?> findSingleBy(String? name) =>
      (super.noSuchMethod(Invocation.method(#findSingleBy, [name]),
              returnValue: Future<_i7.PhraseGroup?>.value())
          as _i4.Future<_i7.PhraseGroup?>);
  @override
  _i4.Future<_i7.PhraseGroup?> add(String? name) =>
      (super.noSuchMethod(Invocation.method(#add, [name]),
              returnValue: Future<_i7.PhraseGroup?>.value())
          as _i4.Future<_i7.PhraseGroup?>);
  @override
  _i4.Future<_i7.PhraseGroup?> rename(String? groupId, String? toName) =>
      (super.noSuchMethod(Invocation.method(#rename, [groupId, toName]),
              returnValue: Future<_i7.PhraseGroup?>.value())
          as _i4.Future<_i7.PhraseGroup?>);
  @override
  _i4.Future<_i7.PhraseGroup?> delete(String? groupId) =>
      (super.noSuchMethod(Invocation.method(#delete, [groupId]),
              returnValue: Future<_i7.PhraseGroup?>.value())
          as _i4.Future<_i7.PhraseGroup?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PhraseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhraseRepository extends _i1.Mock implements _i8.PhraseRepository {
  MockPhraseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Iterable<_i7.Phrase>> findManyByGroup(String? groupId) =>
      (super.noSuchMethod(Invocation.method(#findManyByGroup, [groupId]),
              returnValue: Future<Iterable<_i7.Phrase>>.value(<_i7.Phrase>[]))
          as _i4.Future<Iterable<_i7.Phrase>>);
  @override
  _i4.Future<_i7.Phrase?> getExerciseByGroup(String? groupId,
          {String? exceptPhraseId, int? triggerMinutes = 60}) =>
      (super.noSuchMethod(
          Invocation.method(#getExerciseByGroup, [
            groupId
          ], {
            #exceptPhraseId: exceptPhraseId,
            #triggerMinutes: triggerMinutes
          }),
          returnValue: Future<_i7.Phrase?>.value()) as _i4.Future<_i7.Phrase?>);
  @override
  _i4.Future<_i7.Phrase?> find(String? groupId, String? phraseId) =>
      (super.noSuchMethod(Invocation.method(#find, [groupId, phraseId]),
          returnValue: Future<_i7.Phrase?>.value()) as _i4.Future<_i7.Phrase?>);
  @override
  _i4.Future<_i7.Phrase?> create(
          String? groupId,
          String? phrase,
          String? pronunciation,
          String? definition,
          List<String>? examples,
          int? rate,
          List<int>? rates,
          DateTime? targetUtc,
          [DateTime? createdUtc]) =>
      (super.noSuchMethod(
          Invocation.method(#create, [
            groupId,
            phrase,
            pronunciation,
            definition,
            examples,
            rate,
            rates,
            targetUtc,
            createdUtc
          ]),
          returnValue: Future<_i7.Phrase?>.value()) as _i4.Future<_i7.Phrase?>);
  @override
  _i4.Future<_i7.Phrase?> delete(String? groupId, String? phraseId) =>
      (super.noSuchMethod(Invocation.method(#delete, [groupId, phraseId]),
          returnValue: Future<_i7.Phrase?>.value()) as _i4.Future<_i7.Phrase?>);
  @override
  _i4.Future<_i7.Phrase?> update(
          String? groupId,
          String? phraseId,
          String? phrase,
          String? pronunciation,
          String? definition,
          List<String>? examples,
          int? rate,
          List<int>? rates,
          DateTime? targetUtc,
          DateTime? createdUtc,
          {String? previousGroupId}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [
            groupId,
            phraseId,
            phrase,
            pronunciation,
            definition,
            examples,
            rate,
            rates,
            targetUtc,
            createdUtc
          ], {
            #previousGroupId: previousGroupId
          }),
          returnValue: Future<_i7.Phrase?>.value()) as _i4.Future<_i7.Phrase?>);
  @override
  _i4.Future<void> createBulky(String? groupId, List<dynamic>? input) =>
      (super.noSuchMethod(Invocation.method(#createBulky, [groupId, input]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
