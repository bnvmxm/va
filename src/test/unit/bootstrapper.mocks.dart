// Mocks generated by Mockito 5.0.7 from annotations
// in vocabulary_advancer/test/unit/bootstrapper.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vocabulary_advancer/app/services/localization.dart' as _i4;
import 'package:vocabulary_advancer/core/model.dart' as _i2;
import 'package:vocabulary_advancer/data/repositories/locale_repository.dart'
    as _i6;
import 'package:vocabulary_advancer/data/repositories/phrase_group_repository.dart'
    as _i7;
import 'package:vocabulary_advancer/data/repositories/phrase_repository.dart'
    as _i8;
import 'package:vocabulary_advancer/shared/app_logger.dart' as _i3;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakePhraseGroup extends _i1.Fake implements _i2.PhraseGroup {}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i3.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void v(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#v, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void t(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#t, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void d(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#d, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void i(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#i, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void w(String Function()? message, [String? logName]) =>
      super.noSuchMethod(Invocation.method(#w, [message, logName]),
          returnValueForMissingStub: null);
  @override
  void e(String Function()? message, {String? logName}) =>
      super.noSuchMethod(Invocation.method(#e, [message], {#logName: logName}),
          returnValueForMissingStub: null);
}

/// A class which mocks [LocalizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationService extends _i1.Mock
    implements _i4.LocalizationService {
  MockLocalizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> switchLocale() =>
      (super.noSuchMethod(Invocation.method(#switchLocale, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}

/// A class which mocks [LocaleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleRepository extends _i1.Mock implements _i6.LocaleRepository {
  MockLocaleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String?> getChosen() =>
      (super.noSuchMethod(Invocation.method(#getChosen, []),
          returnValue: Future<String?>.value('')) as _i5.Future<String?>);
  @override
  _i5.Future<dynamic> setLocale(String? tag) =>
      (super.noSuchMethod(Invocation.method(#setLocale, [tag]),
          returnValue: Future<dynamic>.value(null)) as _i5.Future<dynamic>);
}

/// A class which mocks [PhraseGroupRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhraseGroupRepository extends _i1.Mock
    implements _i7.PhraseGroupRepository {
  MockPhraseGroupRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<int, String> findKnownNames() =>
      (super.noSuchMethod(Invocation.method(#findKnownNames, []),
          returnValue: <int, String>{}) as Map<int, String>);
  @override
  Iterable<_i2.PhraseGroup> findMany() =>
      (super.noSuchMethod(Invocation.method(#findMany, []), returnValue: [])
          as Iterable<_i2.PhraseGroup>);
  @override
  _i2.PhraseGroup create(String? name) =>
      (super.noSuchMethod(Invocation.method(#create, [name]),
          returnValue: _FakePhraseGroup()) as _i2.PhraseGroup);
  @override
  _i2.PhraseGroup? rename(int? id, String? toName) =>
      (super.noSuchMethod(Invocation.method(#rename, [id, toName]))
          as _i2.PhraseGroup?);
  @override
  void delete(int? id) => super.noSuchMethod(Invocation.method(#delete, [id]),
      returnValueForMissingStub: null);
}

/// A class which mocks [PhraseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhraseRepository extends _i1.Mock implements _i8.PhraseRepository {
  MockPhraseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i2.Phrase> findManyByGroup(int? groupId) =>
      (super.noSuchMethod(Invocation.method(#findManyByGroup, [groupId]),
          returnValue: []) as Iterable<_i2.Phrase>);
  @override
  _i2.Phrase? getExerciseByGroup(int? groupId, {String? exceptPhraseId}) =>
      (super.noSuchMethod(Invocation.method(#getExerciseByGroup, [groupId],
          {#exceptPhraseId: exceptPhraseId})) as _i2.Phrase?);
  @override
  _i2.Phrase? find(int? groupId, String? phraseId) =>
      (super.noSuchMethod(Invocation.method(#find, [groupId, phraseId]))
          as _i2.Phrase?);
  @override
  _i2.Phrase? create(int? groupId, String? phrase, String? pronunciation,
          String? definition, List<String>? examples) =>
      (super.noSuchMethod(Invocation.method(
              #create, [groupId, phrase, pronunciation, definition, examples]))
          as _i2.Phrase?);
  @override
  void delete(int? groupId, String? phraseId) =>
      super.noSuchMethod(Invocation.method(#delete, [groupId, phraseId]),
          returnValueForMissingStub: null);
  @override
  _i2.Phrase? update(
          int? oldGroupId,
          int? groupId,
          String? phraseId,
          String? phrase,
          String? pronunciation,
          String? definition,
          List<String>? examples) =>
      (super.noSuchMethod(Invocation.method(#update, [
        oldGroupId,
        groupId,
        phraseId,
        phrase,
        pronunciation,
        definition,
        examples
      ])) as _i2.Phrase?);
  @override
  _i2.Phrase? updateStat(int? groupId, String? phraseId, int? newRate,
          Duration? cooldownRange) =>
      (super.noSuchMethod(Invocation.method(
              #updateStat, [groupId, phraseId, newRate, cooldownRange]))
          as _i2.Phrase?);
}
